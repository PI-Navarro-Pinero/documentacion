openapi: 3.0.1
info:
  title: PI Navarro-Piñero API
  description: Descripcion de la API
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: /api
tags:
  - name: api
    description: Raíz de la API
  - name: login
    description: Autenticación de usuario
  - name: weaponry
    description: Todas las herramientas disponibles para utilizar.
paths:
  /api:
    get:
      tags:
        - api
      summary: Conocer modulos del sistema
      description: >-
        Muestra todos los módulos disponibles con su descripción, guía de uso y
        endpoints.
      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              examples:
                Response:
                  value: |-
                    {
                      "description": "Esta es la API disponible para el proyecto",
                      "userLogin": [
                        {
                          "description": "Autenticación de usuario para uso de la aplicación."
                        },
                        {
                          "type": "Basic access authentication."
                        },
                        {
                          "endpoints": [
                            "/api/login"
                          ]
                        }
                      ],
                      "applicationQueries": [
                        {
                          "description": "Realizar consultas sobre la configuración y estado actual de la aplicacion."
                        },
                        {
                          "endpoints": [
                            {
                              "/api/roles": "Administración de roles de usuario."
                            },
                            {
                              "/api/users": "Administración de usuarios habilitados."
                            },
                            {
                              "/api/weaponry": "Administración de módulos para acciones ofensivas."
                            }
                          ]
                        }
                      ]
                    }
  /login:
    post:
      tags:
        - login
      summary: Conocer modulos del sistema
      description: >-
        Muestra todos los módulos disponibles con su descripción, guía de uso y
        endpoints.
      responses:
        '200':
          description: successfull operation
          content: {}
  /weaponry:
    get:
      tags:
        - weaponry
      summary: Obtener herramientas.
      description: >-
        Lista las herramientas ofensivas disponibles con su modo de uso y sus
        endpoints.
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/weaponry/{weaponId}/enable':
    put:
      tags:
        - weaponry
      summary: Habilitar un módulo de ataque.
      operationId: enableWeapon
      parameters:
        - name: weaponId
          in: path
          description: ID de la herramienta
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Module not found
          content: {}
        '405':
          description: Validation exception
          content: {}
  '/weaponry/{weaponId}/disable':
    put:
      tags:
        - weaponry
      summary: Deshabilitar un módulo de ataque.
      operationId: disableWeapon
      parameters:
        - name: weaponId
          in: path
          description: ID de la herramienta
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Module not found
          content: {}
        '405':
          description: Validation exception
          content: {}
  '/weaponry/{weaponId}/configuration':
    get:
      tags:
        - weaponry
      summary: 'Obtiene el archivo de configuración de la herramienta, si es que tiene.'
      parameters:
        - name: weaponId
          in: path
          description: ID de la herramienta.
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - weaponry
      summary: 'Setea el archivo de configuración de la herramienta, si es que tiene.'
      parameters:
        - name: weaponId
          in: path
          description: ID de la herramienta
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Module not found
          content: {}
        '405':
          description: Validation exception
          content: {}
  '/weaponry/{weaponId}/actions':
    get:
      tags:
        - weaponry
      summary: Lista las acciones que puede realizar la herramienta.
      parameters:
        - name: weaponId
          in: path
          description: ID de la herramienta
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid tag value
          content: {}
  '/weaponry/{weaponId}/actions/{actionId}':
    get:
      tags:
        - weaponry
      summary: Reliza una acción con la erramienta.
      parameters:
        - name: weaponId
          in: path
          description: ID de la herramienta
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
        - name: actionId
          in: path
          description: ID de la herramienta
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Action not found
          content: {}
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: boy
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
